<?php 
// $Id$
/**
 * @file
 * Allow us to use a more powerful interface to search
 * and insert nodes into CCK Nodereference fields.
 */

/**
 * Implementation of hook_init()
 */
function nodeselect_init() {
  // Add the necessary CSS and JS
  $path = drupal_get_path('module', 'nodeselect');
  drupal_add_css($path .'/nodeselect.css');
  jquery_ui_add(array('ui.draggable', 'ui.droppable'));
  drupal_add_js($path .'/nodeselect.js');
}

/**
 * Implementation of hook_perm().
 */

function nodeselect_perm() {
  return array('administer nodeselect', 'use nodeselect');
}

/**
 * Implementation of hook_views_api
 */
function nodeselect_views_api() {
  return array(
    'api' => 2, 
    'path' => drupal_get_path('module', 'nodeselect') .'/views'
  );
}

/*
 * After build function for node-form
 * It add the droppable class to the input fields
 */

function nodeselect_alter_field($form, &$form_state) {
  $nodeselect_droppable_fields = variable_get('nodeselect_droppable_fields', array());
  foreach ($nodeselect_droppable_fields as $field_name => $droppable) {
    if (isset($form[$field_name]) && $droppable) {
      nodeselect_add_droppable_class($form[$field_name]);
    }
  }
  return $form;
}

function nodeselect_add_droppable_class(&$elements) {
  foreach (element_children($elements) as $key) {
    if (isset($elements[$key]) && $elements[$key]) {
      // Recurse through all children elements.
      nodeselect_add_droppable_class($elements[$key]);
    }
  }
  if ($elements['#name'] != 'field_node_box_add_more') {
    if (!isset($elements['#attributes'])) {
      $elements['#attributes'] = array();
    }
    if (strlen($elements['#attributes']['class'])) {
      $elements['#attributes']['class'] .= ' nsdrop';
    }
    else {
      $elements['#attributes']['class'] = 'nsdrop';
    }
  }
}


/**
 * Implementation du hook_form_alter().
 *
 */
function nodeselect_form_alter(&$form, &$form_state, $form_id) {
  // We will alter the nodereference field of the node form (add and edit)
  if ($form['#id'] == 'node-form') {
    $form['#after_build'][] = 'nodeselect_alter_field';
  }
  switch ($form_id) {
    // Adding the droppable option to the nodereference field settings
    case 'content_field_edit_form':
      if (($form['#field']['type'] == 'nodereference') &&
          ($form['#field']['widget']['type'] == 'nodereference_autocomplete')) {

        $nodeselect_droppable_fields = variable_get('nodeselect_droppable_fields', array());
        $is_droppable = 0;
        if (isset($nodeselect_droppable_fields[$form['#field']['field_name']])) {
          $is_droppable = $nodeselect_droppable_fields[$form['#field']['field_name']];
        }
        $form['field']['nodeselect_droppable_field'] = array(
          '#type' => 'checkbox',
          '#title' => t('Make this field droppable'),
          '#description' => t('If checked the field will become droppable and will accept content from draggable views'),
          '#default_value' => $is_droppable, 
        );
        $form['#submit'][] = 'nodeselect_droppable_field_submit';
      }
    break;
  }
}

function nodeselect_droppable_field_submit($form, &$form_state) {
  $field = $form_state['values']['field_name'];
  $is_droppable = $form_state['values']['nodeselect_droppable_field'];

  $nodeselect_droppable_fields = variable_get('nodeselect_droppable_fields', array());
  $nodeselect_droppable_fields[$field] = $is_droppable;
  variable_set('nodeselect_droppable_fields', $nodeselect_droppable_fields);
}
